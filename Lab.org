* Clase 1 (Introducción a linux, emacs, ghci y la terminal)
  Correos:
  + Profesora: Alma Rosario Arévalo Loyola | arevalo@ciencias.unam.mx
  + Ayudante: José Ricardo Desales Santos | desales@ciencias.unam.mx
  + Ayudante: Karla Socorro García Alcántara | sgakarla@ciencias.unam.mx
  + Laboratorio: Emiliano Galeana Araujo | galeanaara@ciencias.unam.mx
  + Laboratorio: Ing. Rodrigo Guadalupe Chávez Jiménez | rod_metalgear@comunidad.unam.mx

** Linux
   A simple vista es un Sistema Operativo. Es muy eficiente. Es una
   implementación de libre distribución UNIX. Y es de código abierto.

*** Historia
    Fue creado por Linus Torvalds en 1991.

    Tiene contribuciones de todo el mundo. Muchos usuarios hacen
    aportaciones.

*** Distribuciones
    Existen varias distribuciones que tienen cada una lo suyo.
    Ejemplos
    + Arch
    + Debian
    + Fedora
    + Ubuntu

*** Shell
    Es un programa donde el usuario interactúa.

    Como programadores es de mucha ayuda.

    Permite ejecutar programas, compilar, asignar permisos, crear
    directorios, y más.
    
** Editor
   Un editor de texto es un programa para editar texto plano. Es
   distinto de un procesador de texto, el cual sirve para darle formato
   al texto.

   + Procesadores:
     + Word
     + google docs
   + Editores: 
     + emacs
     + vi

*** emacs
    Emacs es un editor que se puede extender, personalizar,
    documentar, entre otras cosas.
    
    Está escrito en emacs lisp, pueden editar el código.
    
    “Muchos” lo usan.

** Lenguaje
   Un lenguaje de programación es un conjunto de sı́mbolos y reglas
   sintácticas y semánticas que definen su estructura y el significado
   de sus expresiones.
   Ejemplos:
   + C
   + Haskell
   + Java
   + Pascal
   + Python

*** Haskell
    Es un lenguaje puramente funcional (todas sus expresiones son
    funciones).

    Es estáticamente tipado, puramente funcional (Cálculo lambda),
    tiene inferencia de tipos, es concurrente, es perezoso y tiene
    paquetes.

    Una función en Haskell, es un mapeo, que toma argumento(s) de
    uno o varios tipos y produce una expresión a través de
    instruccion(es).

    Un tipo es una forma de identificar un dato.

*** Entorno
    Hugs: Es más usado para enseñanza.

    GCH: (Glasgow Haskell Compiler) Más popular y es más para
    desarrollar cosas. ghci es el intérprete interactivo.

*** Intérpretes
    Es un programa que analiza un programa y lo ejecuta.

    El intérprete toma un programa y lo convierten en código máquina
    hasta que sea necesario.

    Es más sencillo, pero ineficiente a comparación del compilado.
    
**** Descarga
     En una terminal:

     Depende de la distrución.

     + $ sudo apt-get install ghc
     + $ sudo dnf install ghc
     + $ sudo pacman -S ghc
       
     Otras distribuciones google: 'install ghc <distribución>'

**** Uso
     En una terminal:

     $ ghci
     Prelude > (Cargar módulos)

**** Comandos
     + :l Carga un programa al intérprete.
     + :r Recarga un programa.
     + :q Cierra el intérprete.
     + :? Ayuda (:h).
     + :t Tipo de una expresión. Ejemplos...
     + :module + módulo Importar un módulo (import módulo)

**** Prelude
     Siempre está disponible implı́citamente.
     Funciones predefinidas, tipos básicos
     
***** Prelude (Tipos)
      Y Algunas funciones sobre estos.
      + Cadenas de texto
      + Caracteres
      + Listas
      + Números
      + Tuplas

** Bibliografía
   
   + Introducción a Linux. CINVESTAV. [[https://www.cs.cinvestav.mx/~EVOCINV/tutorials/linux.htm][linux]]

   + [[https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf][comandos de emacs]]

   + GNU Emacs [[https://www.gnu.org/software/emacs/][emacs]]

   + Haskell. An advanced, purely functional programming language. [[https://www.haskell.org/][haskell]]

* Clase 2 (Introducción a LaTeX)
  Hay un [[./extra/latex.tex][archivo]] con muchos comentarios con herramientas muy últiles,
  ahí encontrarán mucha información sobre cosas que veremos aquí, 
  cualquier duda, pueden mandarme correo

** ¿Qué es LaTeX?

   Es un sistema de preparación de textos de alta calidad. Puede
   ocuparse para la creación y edición de documentos como manuscritos,
   artículos, cartas, tesis, presentaciones, reportes, carteles, 
   trípticos, etc. Está formado por órdenes y ambientes construídos a
   partir de comandos, de donde radica su facilidad de uso.

** Instalación

   Las siguientes son formas de instalarlo en varias distribuciones.

   + Arch -> pacman -S texlive-most
   + Debian (Ubuntu y Mint están basados en Debian), por lo que es un
     comando parecido. -> sudo apt-get install texlive-full
   + Fedora -> dnf install texlive-scheme-full

   Si tienes otra distribución, puedes consultar la forma adecuada de
   instalar LaTeX [[https://www.latex-project.org/get/][aquí]].

** Páginas de apoyo

   [[https://www.overleaf.com/learn/latex/Main_Page][Documentación de Overleaf para aprender LaTeX]].
   [[https://oeis.org/wiki/List_of_LaTeX_mathematical_symbols][Lista de símbolos matemáticos disponibles]].
   [[http://detexify.kirelabs.org/][¿No encuentras el nombre de un símbolo?]]

** Modo matemático

   Dentro de LaTeX existen bastantes ambientes para escribir fórmulas 
   matemáticas, todas con diferentes particularidades, pero las más
   comunes son las siguientes:
   
   + Si nos interesa que la expresión se sitúe en la misma línea que 
     nuestro texto. 4/2
     #+BEGIN_SRC latex
     $\frac{4}{2}$
     #+END_SRC
   + Si queremos que esté centrada y en renglones aparte.
   #+BEGIN_SRC latex
     \[\frac{4}{2}\]
   #+END_SRC
   
   Podemos usar, dentro de estos ambientes, otros ambientes y comandos 
   para plasmar distintos tipos de operaciones. Por ejemplo, si quisiéramos
   escribir *la chicharronera*, lo haríamos de la siguiente manera:

   #+BEGIN_SRC latex
   x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}
   #+END_SRC

   Puedes profundizar [[https://www.overleaf.com/learn/latex/display_style_in_math_mode][aquí]].

** Formato de texto

El texto también puede estar en diferentes formatos:

| Comando           | Formato       |
|-------------------+---------------|
| \textbf{texto}    | negritas      |
| \textit{texto}    | cursiva       |
| \underline{texto} | subrayado     |
| \uppercase{texto} | mayúsculas    |
| \texttt{texto}    | modo terminal |

** Imágenes
   
   A veces, en cualquier momento, requeriremos colocar imágenes. Para esto,
   necesitamos paquetes externos. Pegaremos estas instrucciones en la 
   sección de paquetes:

   #+BEGIN_SRC latex
   \usepackage{graphicx}
   \graphicspath{{/path/to/images}}
   #+END_SRC

   El primer paquete nos sirve para que el documento pueda tener imágenes,
   ya que LaTeX  no puede hacerlo por sí mismo. Dentro de graphicspath, 
   colocamos la ruta (absoluta o relativa) donde estarán ubicadas las
   imagenes que vamos a pegar (justo donde dice /path/to/images).

   La forma usual de importar imágenes es la siguiente:

   #+BEGIN_SRC latex
   \includegraphics{ruta/imagen}
   #+END_SRC
   opciones deseadas así 
   
   #+BEGIN_SRC latex
   \includegraphics[scale=.5 angle=45]{imagen}
   #+END_SRC

   Esto escala la imágen a la mitad y en un ángulo de 45 grados. 
   Podríamos poner solo una opción o más.
** Listas
   LaTeX tiene la capacidad de crear listas no numeradas, bajo
   el ambiente =itemize= y numeradas con =enumerate= y su estructura
   es la misma.

   #+BEGIN_SRC latex
   \begin{itemize}
   \item Un elemento
   \item Otro elemento
   \item Un elemento mas
   \end{itemize}

   \begin{enumerate}
   \item Elemento 1
   \item Elemento 2
   \item Elemento 3
   \end{enumerate}
   #+END_SRC

** Documentos
   
   Dependiendo del tipo de archivo que queramos crear (libro, artículo, etc), 
   va a cambiar la forma en la que LaTeX lo crea. Esto se define en la primer
   línea que no sea un comentario (Los comentarios se escriben en cualquier 
   parte así)

   #+BEGIN_SRC latex
   %%%%%%%%%%%%%%%%%%%% hola, esto es un comentario
   $\frac{4}{2}$
   #+END_SRC
   
   en nuestro archivo de la siguiente manera.

   #+BEGIN_SRC latex
   \documentclass[]{AMBIENTE}
   #+END_SRC

   Lo que vamos a ver en nuestro documento (Sea cual sea el ambiente) va a ir 
   dentro de
   
   #+BEGIN_SRC latex
   \usepackage{graphicx}
   \begin{document}
   % DOCUMENTO
   \end{document}
   #+END_SRC

*** Ambientes

   Algunos de los ambientes que más se usan son los siguientes:
   
   | Ambiente | Descripción                                                   |
   |----------+---------------------------------------------------------------|
   | article  | Para documentos cortos y artículos, es el ambiente más usado. |
   | report   | Para documentos más largos y ensayos.                         |
   | book     | Útil para escribir libros.                                    |
   | letter   | Se usa para escribir cartas.                                  |
   | beamer   | Se usa para escribir presentaciones estilo PowerPoint.        |
   | leaflet  | Útil para la escritura y edición de folletos.                 |

*** Preámbulo
    La parte que va antes de

    #+BEGIN_SRC latex
    \begin{document}
    #+END_SRC

    se llama =preámbulo=, es aquí donde definimos el ambiente, el idioma, 
    podemos importar paquetes darle formato a comandos y crear tus propios
    comandos.

    #+BEGIN_SRC latex
    \usepackage{<PAQUETE>}
    #+END_SRC

** Tablas
   
   Una de las formas más comunes de escribir tablas es con el entorno
   
   #+BEGIN_SRC latex
   \begin{tabular}{| l | c | r |}\hline
   celda1 & \cellcolor{blue!25}celda2 & celda3 \\ \hline
   información1 & información2 & información3\\ \hline
   información2 & información2 & información3\\ \hline
   celda1 & \cellcolor{blue!25}celda2 & celda3 \\ \hline
   información1 & información2 & información3\\ \hline
   información2 & información2 & información3\\ \hline
   celda1 & \cellcolor{blue!25}celda2 & celda3 \\ \hline
   información1 & información2 & información3\\ \hline
   información2 & información2 & información3\\ \hline
   celda1 & \cellcolor{blue!25}celda2 & celda3 \\ \hline
   información1 & información2 & información3\\ \hline
   información2 & información2 & información3\\ \hline
   \end{tabular}
   #+END_SRC

   Cuando usamos =tabular= en las siguientes llaves escribimos una letra
   por cada columna que queramos dependiendo de la alineación que deseemos,
   las letras permitas son:

  | Letra | Alineción  |
  |-------+------------|
  | l     | izquierda. |
  | r     | derecha.   |
  | c     | centro.    |

  Para delimitar las columnas hemos usado =|=, sino lo ponemos, las columnas
  no tendrían una línea que las separase. De forma análoga =\hline= nos
  dibuja una línea horizontal que delimita las filas.

  Para agregar contenido a las filas, separamos mediante =&= los datos
  correspondientes a cada columna. Y para indicar el fin de una línea escribimos
  =\\=.

  Al igual que con las listas, podemos agregar tablas dentro de tablas y usar el
  modo matemático dentro de sus celdas.

** Compilación
   
   Como vimos al inicio, LaTeX tiene comandos, y para que LaTeX sepa
   qué significa cada comando, hay que compilarlo

   Los archivos de LaTeX tienen extensión =.tex=.

*** terminal
    
    #+BEGIN_SRC bash
      pdflatex nombre.tex
    #+END_SRC

    Va a compilar el archivo nombre y va a producir un archivo =nombre.pdf=
    como salida (Entre otros).

*** emacs
    En emacs, al realizar tu documento, puedes compilar tu documento con el atajo
    =C-c C-c=, y verás en la parte inferior de la pantalla la leyenda 
    =Command [pdflatex]= , en la cual sólo darás Enter.

   Se abrirá una terminal dentro de emacs, donde verás la compilación, y al término,
   podrás ver tu documento con el mismo atajo =C-c C-c= (verás en la parte inferior 
   la instrucción =Command [\doc-view]=).
*** vim
    Si usas vi(m), también puedes encontrar en internet varios plugins que pueden
    ayudarte. Y para compilar puedes usar
    
    #+BEGIN_SRC bash
    :!pdflatex %& 
    #+END_SRC
* Clase 3 Funciones en Haskell

  Haskell es funcional, algunas funciones:
  
  + Tomemos la función que dado un número entero devuelve su sucesor (n+1):
    #+BEGIN_SRC haskell
:{
sucN x = x + 1
:}
sucN 0
#+END_SRC

  + Tomemos la función que dado un número entero devuelve su doble:
    #+BEGIN_SRC haskell
:{
doble  x = x * 2
doble2 x = x + x
:}
doble  8
#+END_SRC

Cuando aplicamos la función el resultado obtenido es por medio de sustituciones
y simplificaciónn de los términos.

doble (x) = x * 2
doble (4) = 4 * 2
          = 8

doble2 (x) = x + x
doble2 (4) = 4 + 4
           = 8
** Intérprete
   ¿Para qué sirve =:t=?

   + Respuesta:
     Tipo de una expresión.

*** Ejemplos
    
    Tipos:
    + :t 3
    + :t 3.0
    + :t 'a'
    + :t "a"
    + :t (1,2)

    Funciones
    + :t (+)
    + :t (/)
    + :t id

*** Más ejemplos, pero que hacen algo
    
    SUMA:
    #+BEGIN_SRC haskell
3.0 + 2
    #+END_SRC

    #+RESULTS:
    : 5.0

    COMPARACIÓN:
    #+BEGIN_SRC haskell
(1.0 + 3) == (2 + 2)
    #+END_SRC

    OTRAS FUNCIONES:
    #+BEGIN_SRC haskell
abs (-1)
    #+END_SRC

** Tipos primitivos
   
   Alunos tipos...
   + Respuesta:
     + Int (enteros)
     + Float/Double
     + Char (caracteres)
     + "String" ([Char]) (Cadenas de texto)
     + (t1, t2, ..., tn) tuplas (tamaño específico)
     + [t1, t2, ..., tn] listas (tamaño variable Y mismo tipo)

** Operadores

   Depende del tipo el operador hace cosas:
   + =+= Suma.
   + =-= Resta.
   + =*= Producto.
   + =**= Potencia en "reales".
   + =div= División en enteros.
   + =/= División en "reales".
   + =<= Menor qué.
   + =<== Menor o igual qué. (<=)
   + =>= Mayor qué.
   + =>== Mayor o igual qué. (>=)
   + ==== Igualdad           (==)
   + =++= Concatenación.
   + =\\= Diferencia entre listas (Import Data.List)

** Haskell ft. mates
   
   En matemáticas una función se ve:
   
   f : A -> B:
   f(x) = y

   f(1) = 7
   f(2) = 90
   f(5) = 10000

   En haskell una función la podemos ver de la forma:
   f :: A -> B
   f x = y

** Ejercicios
   
   [[./extra/Ejercicios.hs][Resolver]]

** Más sobre tuplas
   Una estructura es una manera abstracta de definir objetos, estructuras 
   matemáticas, etc. en cualquier lenguaje de programación.

   Una estructura escencial en Haskell es la tupla, esta estructura nos da
   una forma de poder representar ordenadas de una forma sencilla.

   EJEMPLOS:

   + g: R² x R² -> R
     g x y = x1 + x2

     En haskell sería: 
     #+BEGIN_SRC haskell
g :: (Double, Double) -> (Double, Double) -> Double
g (x1, y1) (x2, y2) = x1 + x2
     #+END_SRC

   + h: Nombres x Edades -> Personas
     g nombre edad = (nombre, edad)

     En haskell sería:
     #+BEGIN_SRC haskell
h :: Nombre -> Cuenta -> Persona
h nombre edad = (nombre, edad)
     #+END_SRC

** Tarea
   + Implementar las funciones.
   + NO usar funciones que ya estén definidas en el lenguaje.
   + Escribir el nombre de los integrantes.
   + Pruebas.
